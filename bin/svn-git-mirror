#!/bin/bash -e
# svn-git-mirror
#
#
#    Copyright 2013 Eric Young
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#

COMMAND="unknown"
SVNREPO="unknown"
GITREPO="unknown"
AUTHORS="unknown"
STANDARD=" -s "
DIRECTORY=`pwd`

function usage {
    echo
    echo "`basename ${0}` [init|update]"
    echo "     init    : initialize a workbench directory"
    echo "               Required arguments:"
    echo "                -s <subversion url>"
    echo "                -g <git url>"
    echo "                -d <workbench directory>"
    echo "               Optional arguments"
    echo "                -a <authors file>"
    echo "                -n (do NOT assume use of standard svn layout)"
    echo
    echo "     update  : update a workbench with SVN changes, pull in git changes, and push to git mirror"
    echo "               Optional arguments:"
    echo "                -d <workbench directory>"
    echo
    exit 1
}

function initialize {

    # validate we got the right arguments
    if [ "${GITREPO}" == "unknown" -o "${SVNREPO}" == "unknown" -o "${DIRECTORY}" == "unknown" ]; then
        echo "Missing a required argument"
        usage
    fi
     
    if [ -d "${DIRECTORY}" ]; then
        echo "Error: The directory already exists, please specify a new directory"
        exit 1
    fi

    # make sure that we can read teh authors file if specified
    if [ "${AUTHORS}" != "unknown" ]; then
        if [ ! -f "${AUTHORS}" ]; then
            echo "An 'authors' file was specified but cannot be found"
            exit 1
        fi
    fi
    
    # make the target directory
    mkdir -p "${DIRECTORY}"
    if [ ! -d "${DIRECTORY}" ]; then
        echo "Error: Unable to make the directory: ${DIRECTORY}"
        exit 1
    fi

    echo "Initializing workbench at: ${DIRECTORY}"
    echo "           SVN repository: ${SVNREPO}"
    echo "           GIT repository: ${GITREPO}"    
    
    cd "${DIRECTORY}"
    
    # initialize an empty repo
    git init --bare
    # tell it what svn repo we want 
    git svn init ${STANDARD} --prefix=svn/  ${SVNREPO}
    
    # set the authors file
    if [ "${AUTHORS}" != "unknown" ]; then
        git config --add svn.authorsfile "${AUTHORS}"
    fi

    # setup the upstream git repo
    git remote add origin ${GITREPO}
    # and configure what goes there
    git config --add remote.origin.push 'refs/remotes/svn/*:refs/heads/*'
    # run garbage collection
    git gc
    
}


function update {
    
    # validate the directory
    if [ ! -d "${DIRECTORY}" ]; then
        echo "Error: Unable to find the directory: ${DIRECTORY}"
        exit 1
    fi
    
    echo "Updating workbench at: ${DIRECTORY}"
    
    # change to the workbench directory
    cd "${DIRECTORY}"
    
    # fetch the updates from SVN    
    git svn fetch
    
    # and push them to the git origin
    git push origin master
    

}


################################################################
# main logic
#
# make sure we got at least one argument
if [ "${1}" != "init" -a "${1}" != "update" ]; then
    usage
fi

# get the command asked for, should be init or update
COMMAND=${1}
shift


while getopts "s:g:d:a:n" opt; do
  case $opt in
    s)
      SVNREPO="${OPTARG}"
      ;;
    g)
      GITREPO="${OPTARG}"
      ;;
    d)
      DIRECTORY="${OPTARG}"
      ;;
    a)
      AUTHORS="${OPTARG}"
      ;;
    n)
      STANDARD=" "
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      usage
      ;;
  esac
done


# if we are initializing a repo
if [ "${COMMAND}" == "init" ]; then
    initialize
fi

# if we are updating a repo
if [ "${COMMAND}" == "update" ]; then
    update
fi

# done
exit 0
